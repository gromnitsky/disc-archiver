#!/usr/bin/env node

'use strict';

let util = require('util')

// an obligatory omglol
let dup = function(obj) {
    return JSON.parse(JSON.stringify(obj))
}

class Disc {
    constructor(name, storage_size) {
	if (!(name && storage_size))
	    throw new Error('name & storage_size required')
	this.name = name
	this.free = storage_size
	this.files = []
	this._file_names_cache = {}
    }

    exists(file) {
	return this._file_names_cache[file.name]
    }

    add(file) {
	if (this.exists(file)) throw new Error(`file ${file.name} is already on disc ${this.name}`)
	if (file.size > this.free) return false

	this.free -= file.size
	this.files.push(file)
	this._file_names_cache[file.name] = true
	return true
    }

    add_partial(file, pos_from, pos_to) {
	if (this.exists(file)) throw new Error(`file ${file.name} is already on disc ${this.name}`)

	let data_size = pos_to - pos_from + 1
	if (!data_size || data_size < 0)
	    throw new Error('an attempt to write 0 bytes')

	if (data_size > this.free) return false

	this.free -= data_size
	file = dup(file)
	file.pos_from = pos_from
	file.pos_to = pos_to
	this.files.push(file)
	this._file_names_cache[file.name] = true
	return true
    }
}

exports.Disc = Disc

class DiscArray {
    constructor(disc_size) {
	this.disc_size = disc_size
	this.storage = []
	this.storage.push(new Disc(1, disc_size))
    }

    save(file, pos_from) {
	if (file.size <= 0) return false

	if (file.size <= this.disc_size) {
	    // try to find a free space for this file
	    for (let disc of this.storage) {
		if (disc.add(file)) return true
	    }
	    // all discs are filled w/ something, we need a new one
	    let d = new Disc(this.storage.length + 1, this.disc_size)
	    d.add(file)
	    return this.storage.push(d)

	} else {
	    // the file is too big for the size of a single disc
	    pos_from = pos_from || 0
	    let pos_to = -1
	    for (let disc of this.storage) {
		if (!disc.free) continue
		pos_to = pos_from + disc.free - 1
		if (pos_to >= file.size) pos_to = file.size - 1
//		console.error('\n\n---------\n', disc.name, file.name, pos_from, pos_to)
//		console.error(util.inspect(this.storage, {depth: null}))
		disc.add_partial(file, pos_from, pos_to)
		pos_from = pos_to + 1

		if (pos_to === file.size - 1) return true
	    }

	    // an additional disc is requied
	    this.storage.push(new Disc(this.storage.length + 1,
				       this.disc_size))
	    // RECURSION!
	    return this.save(file, pos_from)
	}

	throw new Error('should not be here')
    }
}

exports.DiscArray = DiscArray

class NumberParser {
    static parse(str) {
	str = str.replace(/\s*/g, '')
	let err = new Error("invalid number")
	if (!str.length) throw err

	for (let key in NumberParser.media) {
	    if (key === str) return NumberParser.media[key][0]
	}

	str = str.replace(/[^0-9]+/g, '')
	if (!str.length) throw err
	return parseInt(str)
    }
}

NumberParser.media = {
    floppy: [1457664, '3Â½, I had those when I was a kid!'],
    // https://cdburnerxp.se/help/appendices/disctypes, minus a ~1 MB
    // for the iso fs overhead (the exact metadata size depends on the
    // amount of files & the length of their names).
    cd: [681000000, '"74 minutes of uncompressed audio", lol.'],
    dvd: [4700000000, 'Single layer.'],
    bd: [25024000000, 'Single layer.']
}

exports.NumberParser = NumberParser


if (require.main !== module) return

let path = require('path')
let fs = require('fs')
let sprintf = require("sprintf-js").sprintf // becase util.format() is lame

let u = require('./lib/u')

let data = function(files) {
    let r = []
    files.forEach( (file) => r.push({name: file,
				     size: fs.statSync(file).size}) )
    return r
}

let data_sort = function(d) {
    return d.sort( (a, b) => a.size - b.size )
}

let print_instructions = function(disc_size, data) {
    let da = new DiscArray(disc_size)
    for (let file of data_sort(data)) {
	da.save(file)
//	console.log(util.inspect(da, {depth: null}))
    }

    for (let disc of da.storage) {
	for (let file of disc.files) {
	    let r = []
	    r.push(u.pad(disc.name, u.numlen(da.storage.length)))
	    r.push(file.name)
	    if (typeof file.pos_from !== undefined) {
		r.push(file.pos_from)
		r.push(file.pos_to)
	    }
	    process.stdout.write(r.join("\t") + "\n")
	}
    }
}

if (process.argv.length < 2+2) {
    let exe = path.basename(process.argv[1])
    console.error(`Usage: ${exe} DISC_SIZE file1 [file2 ...]`)
    console.error(`Example: ${exe} 4,700,000,000 dump_*.aes`)
    console.error(`Example: ${exe} cd dump_*.aes`)
    console.error(`\nSupported optional disc size aliases:`)
    for (let key in NumberParser.media) {
	let val = NumberParser.media[key]
	console.error(sprintf('  %-6s  %15s  %s', key, val[0].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),  val[1]))
    }
    process.exit(1)
}

print_instructions(NumberParser.parse(process.argv[2]),
		   data(process.argv.slice(3)))
